/*
组队竞赛
链接：https://www.nowcoder.com/questionTerminal/6736cc3ffd1444a4a0057dee89be789b?orderByHotValue=1&page=1&onlyReference=false

牛牛举办了一次编程比赛,参加比赛的有3*n个选手,每个选手都有一个水平值a_i.现在要将这些选手进行组队,一共组成n个队伍,即每个队伍3人.牛牛发现队伍的水平值等于该队伍队员中第二高水平值。
例如:
一个队伍三个队员的水平值分别是3,3,3.那么队伍的水平值是3
一个队伍三个队员的水平值分别是3,2,3.那么队伍的水平值是3
一个队伍三个队员的水平值分别是1,5,2.那么队伍的水平值是2
为了让比赛更有看点,牛牛想安排队伍使所有队伍的水平值总和最大。
如样例所示:
如果牛牛把6个队员划分到两个队伍
如果方案为:
team1:{1,2,5}, team2:{5,5,8}, 这时候水平值总和为7.
而如果方案为:
team1:{2,5,8}, team2:{1,5,5}, 这时候水平值总和为10.
没有比总和为10更大的方案,所以输出10.
输入描述:
输入的第一行为一个正整数n(1 ≤ n ≤ 10^5)
第二行包括3*n个整数a_i(1 ≤ a_i ≤ 10^9),表示每个参赛选手的水平值.
输出描述:
输出一个整数表示所有队伍的水平值总和最大值.
示例1
输入
2
5 2 8 5 1 5
输出
10
*/

/*
	思路：使用贪心法的思路，每次当前的最优解，而要使所有队伍水平值最大，则需要保证所有队伍的第二大的数据都得选到能获取的最大值。
	所以直接从数据尾部开始找，从末尾开始分组，例如6个数据，一共2组，一组3个。
	首先给数据从小到大排序。
	然后数据的最末端3n则是最大值，而倒数第一个3n-1则就是次大值，这个就是某队能获取的最大水平值之一。接着选取另一队的最大值和次大值，就可以直接在原来的基础上往后走两个，
	比如倒数第三个就是第二队的最大值，倒数第四个就是第二队的次大值，以此类推。
	
	1 2 5 5 5 8
	    - + - +
	    -：次大
		+：最大 
	 
*/
#include<iostream>
#include<vector>
#include<algorithm>

using namespace std;

int main()
{
    size_t n = 0;  
    while(cin >> n)
    {
        long long count = 0;
        vector<int> vec(n * 3);
        for(int i = 0; i < n * 3; i++)
        {
            cin >> vec[i];
        }

        sort(vec.begin(), vec.end());

        for (int i = n; i <= vec.size() - 2; i += 2)
        { 
            count += vec[i]; 
        }
        
        cout << count << endl;  
    }
    return 0;
}
